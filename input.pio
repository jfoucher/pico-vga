
.program input

.wrap_target
        wait 1 pin 0
waitloop:
        in pins, 16 [32]
        ;mov isr, pins
        ; go back to waitloop if pin 5 is still high
        jmp pin waitloop
        ; if we get here, it means pin 5 became low
        push noblock
        ; in null, 32
.wrap

% c-sdk {
static inline uint bits_packed_per_word(uint pin_count) {
    // If the number of pins to be sampled divides the shift register size, we
    // can use the full SR and FIFO width, and push when the input shift count
    // exactly reaches 32. If not, we have to push earlier, so we use the FIFO
    // a little less efficiently.
    const uint SHIFT_REG_WIDTH = 32;
    return SHIFT_REG_WIDTH - (SHIFT_REG_WIDTH % pin_count);
}
void input_program_init(PIO pio, uint sm, uint offset, uint pin) {
        pio_gpio_init(pio, pin);
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 32, false);
        pio_sm_config c = input_program_get_default_config(offset);
        sm_config_set_in_pins(&c, pin);
        // sm_config_set_out_pins(&c, pin, 14);
        sm_config_set_jmp_pin(&c, 5);
        sm_config_set_in_shift(&c, false, false, 16);

        pio_sm_init(pio, sm, offset, &c);
}
%}